+package graphs
+alias sprintf org.eolang.txt.sprintf
+alias org.eolang.util.ieee754.infinity
+alias graphs.vertex
+alias graphs.edge
+alias graphs.adjacency
+alias graphs.adjacencyList

# Looks for a path from source to sink. 
# If .found, then the path is in .path.
[graph source sink] > findPath
  dfs > @
    initialVisited
    *
      edge
        source
        infinity

  map. > initialVisited
    graph.adjacencies
    []
      [currentAdjacency] > map
        false > @

  [visited path] > dfs
    [found path visited] > resultStructure

    path.get (path.length.sub 1) > currentVertex

    replace. > visitedWithCurrent
      visited
      currentVertex.ivertex
      true

    if. > @
      eq.
        currentVertex.ivertex
        ^.sink
      resultStructure
        true
        path
        visited
      if.
        visited.get (currentVertex.ivertex)
        resultStructure
          false
          path
          visited
        reduce.
          (^.graph.adjacencies.get (currentVertex.ivertex)).edges
          resultStructure
            false
            path
            visitedWithCurrent
          []
            [subResult currentEdge] > reduce
              currentEdge.ivertex > nextVertex

              if. > @
                subResult.found
                subResult
                ^.^.^.dfs
                  ^.^.visitedWithCurrent
                  append.
                    ^.^.path
                    currentEdge

[path] > findMinCapacity
  min. > @
    path
    []
      [elemA indexA elemB indexB] > comparator
        ^.^.currentD.get elemA > dA
        ^.^.currentD.get elemB > dB
        if. > @
          less.
            dA
            dB
          -1
          if.
            greater.
              dA
              dB
            1
            0

[graph path min] > relax
  relaxPath > @
    relaxPath graph path min true
    path
    min
    false

  [graph originalPath min straight] > relaxPath
    [resultGraph currentVertex] > resultStructure

    result.resultGraph > @

    if. > path
      straight
      originalPath
      originalPath.reverse

    (path.get 0).ivertex > start

    reduce. > result
      path.remove 0
      resultStructure
        graph
        start
      []
        [subResult currentEdge] > reduce
          ^.^.resultStructure > @
            ^.^.^.updateEdge
              subResult.resultGraph
              subResult.currentVertex
              currentEdge.ivertex
              ^.^.min
              ^.^.straight
            currentEdge.ivertex

  [graph from to min straight] > updateEdge
    graph.adjacencies.get from > replacedAdjacency

    find. > replacedEdgeIndex
      replacedAdjacency.edges
      []
        [current] > find
          eq. > @
            current.ivertex
            ^.^.to

    replacedAdjacency.edges.get replacedEdgeIndex > replacedEdge

    if. > updatedCapacity
      replacedEdgeIndex.eq -1
      min
      if.
        straight
        sub.
          replacedEdge.weight
          min
        add.
          replacedEdge.weight
          min

    ^.^.adjacencyList > @
      replace.
        graph.adjacencies
        from
        ^.^.adjacency
          replacedAdjacency.vertex
          if.
            replacedEdgeIndex.eq -1
            append.
              replacedAdjacency.edges
              ^.^.edge
                to
                updatedCapacity
            if.
              updatedCapacity.greater 0
              replace.
                replacedAdjacency.edges
                replacedEdgeIndex
                ^.^.edge
                  replacedEdge.ivertex
              remove.
                replacedAdjacency.edges
                replacedEdgeIndex

[graph source sink] > fordFulkerson
  rec graph 0.0 > @

  [currGraph flow] > rec
    findPath > path
      currGraph
      ^.source
      ^.sink

    findMinCapacity (path.path) > min

    if. > @
      path.found
      rec
        relax currGraph (path.path) min
        flow.add min
      flow
